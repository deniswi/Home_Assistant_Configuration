blueprint:
  name: Popp TRV automatic heating cycle
  description: "# Popp TRV automatic heating cycle\n\n
  Uses Popp TRV entities for automatic heating cycle depending on the timeframe\n
  Adopted from the great automation of Simon42 => https://gist.github.com/TheRealSimon42/3b783cf34cf3185ada8dfa0ff67249c5"
  domain: automation
  source_url: https://gist.github.com/deniswi/3db70ce05b62b075dbeaa0c23d6b3b91
  input:
    climate_entities:
      name: Popp TRV entity
      description: The Popp TRV entities that will be used for this room
      selector:
        entity:
          domain: climate
          multiple: true
    presence_detector:
      name: Presence Detector
      description: Only run if this boolean is true (Normally this is set to a Entity which reflects if someone is currently at home)
      default:
      selector:
        entity:
          domain: [binary_sensor, input_boolean]
    no_presence_wait:
      name: Wait time
      description: Time to wait before setting the away temperature if the presence detector changes to false (Nobody is home anymore).
      default: 120
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds
    away_temperature:
      name: Away Temperature
      description: This is the temperature which is set when nobody is at home (Input Boolean above)
      default: 18
      selector:
        number:
          min: 5
          max: 25
          unit_of_measurement: temperature
    default_temperature:
      name: Default Temperature
      description: This is the temparture which is set when someone is at home (Input Boolean above) and no other Temperature is set for the given tiemframe.
      default: 20
      selector:
        number:
          min: 5
          max: 25
          unit_of_measurement: temperature
    automation_blocker:
      name: Automation Blocker (Optional)
      description: Only run if this boolean is in desired state (see next input)
      default:
      selector:
        entity:
          domain: [binary_sensor, input_boolean]
    automation_blocker_boolean:
      name: Automation Blocker Chooser (Optional)
      description: Desired state of automation blocker, choose on for on and off for off
      default: false
      selector:
        boolean: 
    time_morning:
      name: Time setting for morning
      description: A time input which defines the time from which on the temperature settings will be enabled when someone is at home.
      default: "06:30:00"
      selector:
        time:
    morning_temperature:
      name: Temperature setting for mornung
      description: This is the temperature which should normally be set for this timeframe (when someone is at home).
      default: 19
      selector:
        number:
          min: 5
          max: 25
          unit_of_measurement: temperature
    time_day:
      name: Time setting for day
      description: A time input which defines the time from which on the temperature settings will be enabled when someone is at home.
      default: "08:00:00"
      selector:
        time:
    day_temperature:
      name: Temperature setting for day
      description: This is the temperature which should normally be set for this timeframe (when someone is at home).
      default: 21
      selector:
        number:
          min: 5
          max: 25
          unit_of_measurement: temperature
    time_evening:
      name: Time setting for evening
      description: A time input which defines the time from which on the temperature settings will be enabled when someone is at home.
      default: "18:00:00"
      selector:
        time:
    evening_temperature:
      name: Temperature setting for evening
      description: This is the temperature which should normally be set for this timeframe (when someone is at home).
      default: 20
      selector:
        number:
          min: 5
          max: 25
          unit_of_measurement: temperature
    time_night:
      name: Time setting for night
      description: A time input which defines the time from which on the temperature Settings will be enabled when someone is at home.
      default: "22:00:00"
      selector:
        time:
    night_temperature:
      name: Temperature setting for night
      description: This is the temperature which should normally be set for this timeframe (when someone is at home).
      default: 17
      selector:
        number:
          min: 5
          max: 25
          unit_of_measurement: temperature
mode: restart
max_exceeded: silent
variables:
  climate_entities: !input climate_entities
  presence_detector: !input presence_detector
  away_temperature: !input away_temperature
  default_temperature: !input default_temperature
  automation_blocker: !input automation_blocker
  automation_blocker_boolean : !input automation_blocker_boolean
  morning_temperature: !input morning_temperature
  day_temperature: !input day_temperature
  evening_temperature: !input evening_temperature
  night_temperature: !input night_temperature

trigger:
  # All state triggers
  - platform: state
    entity_id: !input presence_detector
    from: "off"
    to: "on"
  - platform: state
    entity_id: !input presence_detector
    from: "on"
    to: "off"
    for: !input no_presence_wait
  # Time pattern trigger
  - platform: time_pattern
    minutes: /5
  # Time frame triggers
  - platform: time
    at: !input time_morning
  - platform: time
    at: !input time_day
  - platform: time
    at: !input time_evening
  - platform: time
    at: !input time_night

condition:
- condition: or
  conditions:
  - '{{ automation_blocker == none }}'
  - '{{ automation_blocker_boolean and states[automation_blocker].state == ''on''
    }}'
  - '{{ not automation_blocker_boolean and states[automation_blocker].state == ''off''
    }}'

action:
  - choose:
      - conditions:
          - condition: state
            # Nobody at home
            entity_id: !input presence_detector
            state: "off"
        sequence:
          - repeat:
              for_each: !input climate_entities
              sequence:
                - service: climate.set_temperature
                  data:
                    temperature: !input away_temperature
                  target:
                    entity_id: "{{repeat.item}}"
    # Morning time frame
      - conditions:
          - condition: time
            after: !input time_morning
            before: !input time_day
        sequence:
          - repeat:
              for_each: !input climate_entities
              sequence:
                - condition: not
                  conditions:
                    - condition: template
                      value_template: '{{ (state_attr(repeat.item, ''temperature'') | float(0)) == morning_temperature }}'
                - service: climate.set_temperature
                  data:
                    temperature: !input morning_temperature
                  target:
                    entity_id: "{{repeat.item}}"
    # END Morning Timeframe
    # Day Timeframe
      - conditions:
          - condition: time
            after: !input time_day
            before: !input time_evening
        sequence:
          - repeat:
              for_each: !input climate_entities
              sequence:
                - condition: not
                  conditions:
                    - condition: template
                      value_template: '{{ (state_attr(repeat.item, ''temperature'') | float(0)) == day_temperature }}'
                - service: climate.set_temperature
                  data:
                    temperature: !input day_temperature
                  target:
                    entity_id: "{{repeat.item}}"
    # END Day Timeframe
    # Evening Timeframe
      - conditions:
          - condition: time
            after: !input time_evening
            before: !input time_night
        sequence:
          - repeat:
              for_each: !input climate_entities
              sequence:
                - condition: not
                  conditions:
                    - condition: template
                      value_template: '{{ (state_attr(repeat.item, ''temperature'') | float(0)) == evening_temperature }}'
                - service: climate.set_temperature
                  data:
                    temperature: !input evening_temperature
                  target:
                    entity_id: "{{repeat.item}}"
    # END Evening Timeframe
    # Night Timeframe
      - conditions:
          - condition: time
            after: !input time_night
            before: !input time_morning
        sequence:
          - repeat:
              for_each: !input climate_entities
              sequence:
                - condition: not
                  conditions:
                    - condition: template
                      value_template: '{{ (state_attr(repeat.item, ''temperature'') | float(0)) == night_temperature }}'
                - service: climate.set_temperature
                  data:
                    temperature: !input night_temperature
                  target:
                    entity_id: "{{repeat.item}}"
    # END Night Timeframe
    default:
      - repeat:
          for_each: !input climate_entities
          sequence:
            - condition: not
              conditions:
                - condition: template
                  value_template: '{{ (state_attr(repeat.item, ''temperature'') | float(0)) == default_temperature }}'
            - service: climate.set_temperature
              data:
                temperature: !input default_temperature
              target:
                entity_id: "{{repeat.item}}"